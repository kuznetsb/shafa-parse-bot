import logging
import asyncio
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
import random
import time
from fake_useragent import UserAgent
import sqlite3
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from urllib.request import urlretrieve
import os.path
from pathlib import Path
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from webdriver_manager.chrome import ChromeDriverManager
import glob
import os 

logging.basicConfig(level=logging.INFO)


bot = Bot(token='5609694250:AAGJFjFyrVU3dT8wBsG7cK6G2DXLmta24AQ')
dp = Dispatcher(bot, storage=MemoryStorage())


useragent = UserAgent()

db = sqlite3.connect('baza.db', check_same_thread=False)
sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS searches (id INTEGER PRIMARY KEY AUTOINCREMENT, search TEXT, gender TEXT)""")
sql.execute("""CREATE TABLE IF NOT EXISTS users (id BIGINT, nick TEXT, username TEXT, access INT)""")

class FSMAdmin(StatesGroup):
    add_search = State()
    add_gender = State()

class FSMdel(StatesGroup):
    del_search = State()

class FSMuser(StatesGroup):
    id = State()
    access = State()

@dp.message_handler(commands=['getrazrab'])
async def getrazrabotchik(message: types.Message):
	if message.from_user.id == 319843992:
		sql.execute(f"UPDATE users SET access = 777 WHERE id = 319843992")
		db.commit()
		await message.answer(f"‚úÖ | –í—ã –≤—ã–¥–∞–ª–∏ —Å–µ–±–µ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
	else:
		await message.answer(f"‚õîÔ∏è | –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")

@dp.message_handler(commands='access', state=None)
async def setaccess(message: types.Message):
    try:
        uid = message.from_user.id
        sql.execute(f"SELECT * FROM users WHERE id = {uid}")
        getaccess = sql.fetchone()[3]
        accessquery = 777
        if getaccess < accessquery:
            await message.answer(f"‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        else:
            await FSMuser.id.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: 596060542')
    except:
        await message.answer(f'üö´ | –£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏')

@dp.message_handler(state=FSMuser.id)
async def access_next(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['id'] = int(message.text)
        rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
        rmk.add(types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), types.KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'), types.KeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'))
        await FSMuser.next()
        await message.answer('–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å?:', reply_markup=rmk)
    except:
    	await message.answer(f'üö´ | –£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏')

@dp.message_handler(state=FSMuser.access)
async def access_result(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['access'] = message.text
            if data['access'] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
                accessgavedname = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                accessgaved = 0
            elif data['access'] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                accessgavedname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                accessgaved = 1
            elif data['access'] == "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
                accessgavedname = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
                accessgaved = 777
            sql.execute(f"UPDATE users SET access = {accessgaved} WHERE id = {data['id']}")
            db.commit()
            await message.answer(f"–î–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['id']}\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {accessgavedname}")
            await state.finish()
        

    except Exception as e:
    	await message.answer(e)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    my_searches = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ—à—É–∫—ñ–≤ üîç')
    edit_searches = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—à—É–∫–∏ ‚úèÔ∏è')
    markup.add(my_searches)
    markup.add(edit_searches)
    try:
        getname = message.from_user.first_name
        username = message.from_user.username
        cid = message.chat.id
        uid = message.from_user.id
        sql.execute(f"SELECT id FROM users WHERE id = {uid}")
        if sql.fetchone() is None:
            sql.execute(f"INSERT INTO users VALUES ({uid}, '{getname}', '{username}', 0)")
        await message.answer(f"‚úåÔ∏è –ü—Ä–∏–≤—ñ—Ç, {getname}!\n\n–û–±–µ—Ä–∏ —â–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏", reply_markup=markup)
        db.commit()

    except Exception as e:
        await bot.send_message(cid, e)

@dp.message_handler(commands=['profile', 'myinfo', 'myprofile'])
async def myprofile(message: types.Message):
    try:
        uid = message.from_user.id
        sql.execute(f"SELECT * FROM users WHERE id = {uid}")
        getaccess = sql.fetchone()[3]
        if getaccess == 0:
            accessname = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
        elif getaccess == 1:
            accessname = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        elif getaccess == 777:
            accessname = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
        sql.execute(f"SELECT * FROM users WHERE id = {uid}")
        info = sql.fetchone()
        await message.answer(f"üìá | –¢–≤—ñ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§ | –¢–≤—ñ–π ID: {info[0]}\nüëë | –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: {accessname}\n\n")
    except Exception as e:
    	await message.answer(e)



@dp.message_handler(content_types=['text'], state=None)
async def menu(message: types.Message):
    try:
        cid = message.chat.id
        if message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—à—É–∫–∏ ‚úèÔ∏è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            new_search = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –ø–æ—à—É–∫ ‚ûï')
            del_search = types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—à—É–∫ ‚ùå')
            markup.add(new_search, del_search)
            await message.answer(f"–û–∫–µ–π, —Ç–∏ —Ö–æ—á–µ—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤–æ—ó –ø–æ—à—É–∫–∏\n\n–¢–∏ –±–∞–∂–∞—î—à –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —á–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–æ—à—É–∫?", reply_markup= markup)
        elif message.text == '–°–ø–∏—Å–æ–∫ –ø–æ—à—É–∫—ñ–≤ üîç':
            sql.execute(f"SELECT * FROM searches")
            searches = sql.fetchall()
            answer_text = ''
            for i in searches:
                answer_text += f'{i[0]}. {i[1]}\n\n'
            await message.answer(answer_text)
        elif message.text == '–î–æ–¥–∞—Ç–∏ –ø–æ—à—É–∫ ‚ûï':
            await FSMAdmin.add_search.set()
            await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –ø–æ—à—É–∫')
        elif message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—à—É–∫ ‚ùå':
            await FSMdel.del_search.set()
            await message.answer('–í–≤–µ–¥–∏ ID –ø–æ—à—É–∫—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏')


    except Exception as e:
        bot.send_message(cid, e)

@dp.message_handler(content_types=['text'], state=FSMAdmin.add_search)
async def gender_add(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_search'] = message.text
        rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
        rmk.add(types.KeyboardButton('–ß–æ–ª–æ–≤—ñ—á–∏–π'), types.KeyboardButton('–ñ—ñ–Ω–æ—á–∏–π'), types.KeyboardButton('–û–±–∏–¥–≤–∞'))
        await FSMAdmin.next()
        await message.answer('–û–±–µ—Ä—ñ—Ç—å —è–∫–∏–π –æ–¥—è–≥ –±–æ—Ç—É —Å–ª—ñ–¥ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏:', reply_markup=rmk)


@dp.message_handler(content_types=['text'], state=FSMAdmin.add_gender)
async def approve_add(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_gender'] = message.text
        rmk = types.InlineKeyboardMarkup()
        add_yes = types.InlineKeyboardButton(text='‚úÖ', callback_data='add_yes')
        add_no = types.InlineKeyboardButton(text='‚ùå', callback_data='add_no')
        rmk.add(add_yes, add_no)
        await message.answer(f"–ù–∞–∑–≤–∞: {data['add_search']}\n–°—Ç–∞—Ç—å: {data['add_gender']}\n\n–¢–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—à –¥–æ–¥–∞—Ç–∏ —Ü–µ–π –ø–æ—à—É–∫?", reply_markup=rmk)

@dp.callback_query_handler(lambda call: call.data == 'add_yes' or call.data == 'add_no', state=FSMAdmin.add_gender)
async def add_search_result(call: types.CallbackQuery, state: FSMContext):
    try:
        if call.data == 'add_yes':
            async with state.proxy() as data:
                sql.execute(f"INSERT INTO searches (search, gender) VALUES ('{data['add_search']}', '{data['add_gender']}')")
                db.commit()
                json_name = data['add_search'].replace(' ','').lower().strip()
                if not os.path.exists(f'searches/'):
                    Path(f'searches/').mkdir(parents=True, exist_ok=True)
                open(f'searches/{json_name}.json', 'w').close()
                await call.message.answer(f"‚úÖ | –¢–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–≤ –ø–æ—à—É–∫ {data['add_search']}")
                await state.finish()
        elif call.data == 'add_no':
            await bot.delete_message(call.message.chat.id, call.message.message_id-0)
            await call.answer(f"üö´ | –¢–∏ –≤—ñ–¥–º—ñ–Ω–∏–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É")
            await state.finish()
        await bot.answer_callback_query(callback_query_id=call.id)

    except Exception as e:
        print(e)

@dp.message_handler(content_types=['text'], state=FSMdel.del_search)
async def search_del(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['del_search'] = int(message.text)
            rmk = types.InlineKeyboardMarkup()
            add_yes = types.InlineKeyboardButton(text='‚úÖ', callback_data='del_yes')
            add_no = types.InlineKeyboardButton(text='‚ùå', callback_data='del_no')
            rmk.add(add_yes, add_no)
            sql.execute(f"SELECT * FROM searches WHERE id = {data['del_search']}")
            global item_del
            item_del = sql.fetchone()[1]
            await message.answer(f"–¢–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—à –≤–∏–¥–∞–ª–∏—Ç–∏ {item_del} –∑ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è?", reply_markup=rmk)
    except:
        await state.finish()
        await start(message)



@dp.callback_query_handler(lambda call: call.data == 'del_yes' or call.data == 'del_no', state=FSMdel.del_search)
async def del_search_result(call: types.CallbackQuery, state: FSMContext):
    try:
        if call.data == 'del_yes':
            async with state.proxy() as data:
                sql.execute(f"SELECT * FROM searches WHERE id = {data['del_search']}")
                search_name = sql.fetchone()[1]
                sql.execute(f"DELETE FROM searches WHERE id = {data['del_search']}")
                db.commit()
                await call.message.answer(f"‚úÖ | –¢–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–∏–≤ –ø–æ—à—É–∫ {item_del}")
                await state.finish()
            name_search = search_name.replace(' ','').lower().strip()
            for file in glob.glob(f'photos/{name_search}/*'):
                os.remove(file)
            os.rmdir(os.path.abspath(f'photos/{name_search}'))
            os.remove(f'searches/{name_search}.json')
            
            
        elif call.data == 'del_no':
            await bot.delete_message(call.message.chat.id, call.message.message_id-0)
            await call.answer(f"üö´ | –¢–∏ –≤—ñ–¥–º—ñ–Ω–∏–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—à—É–∫—É")
            await state.finish()
        await bot.answer_callback_query(callback_query_id=call.id)
    
    except Exception as e:
        print(e)


async def get_data(url):
    try:
        options = webdriver.ChromeOptions()
        options.add_argument(f'user-agent={useragent.random}')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.headless = True

        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.get(url=url)

        with open("source-page.html", 'w') as file:
            file.write(driver.page_source)
        await get_items("source-page.html")


    except Exception as ex:
        print(ex)
    finally:
        driver.close()
        driver.quit()


async def get_items(file_path):
    try:
        with open(file_path) as file:
            src = file.read()

        soup = BeautifulSoup(src, "lxml")
        items_divs = soup.find('ul', class_='b-catalog b-catalog_max-columns_4 b-block').find_all("li", class_='b-catalog__item')

        ads_list = []

        for item in items_divs:
            item_price = item.find("div", class_='b-tile-item__info').find("div", class_='b-tile-item__price-holder').find("div", class_ ='b-tile-item__price').text.strip()
            item_name = item.find("div", class_='b-tile-item__info').find("a").text.strip()
            item_link = item.find("div", class_='b-tile-item__info').find("a").get("href")
            item_link = f'https://shafa.ua{item_link}'
            item_size = item.find("div", class_='b-tile-item__info').find("span", class_='b-tile-item__size').text.strip()
            item_image = item.find('img')['data-src']
            folder_name = item_search.replace(' ','').lower().strip()
            if not os.path.exists(f'photos/{folder_name}/'):
                Path(f'photos/{folder_name}/').mkdir(parents=True, exist_ok=True)
            image_name = item_image.split('/')[3]
            path = f'photos/{folder_name}/{image_name}.png'
        

            ads_list.append(
                {
                    "item_name": item_name,
                    "item_price": item_price,
                    "item_size": item_size,
                    "item_link": item_link,
                    "item_path": path,
                    "item_image": item_image
                }
            )

        search_item = item_search.replace(' ','').lower()
            
        with open (f'searches/{search_item}.json', 'r') as f:
            ads = json.load(f)


        for ad in ads_list:
            if ad not in ads:
                path = ad['item_path']
                item_image = ad['item_image']
                urlretrieve(item_image, path)
                with open (f'searches/{search_item}.json', 'r') as check:
                    file_len = json.load(check)
                    if len(file_len) > 192:
                        with open (f'searches/{search_item}.json', 'w+') as result:
                            del file_len[:48]
                            json.dump(file_len, result, indent=4, ensure_ascii=False)


                with open (f'searches/{search_item}.json', 'r+') as f1:
                    file_data = json.load(f1)
                    file_data.append(ad)
                    f1.seek(0)
                    json.dump(file_data, f1, indent = 4, ensure_ascii=False)
                            

                sql.execute(f"SELECT * FROM users WHERE access = 1")
                admins = sql.fetchall()
                for i in admins:
                    with open (f"{ad['item_path']}", 'rb') as photo:
                        await bot.send_photo(i[0], photo, caption=f"–ù–∞–∑–≤–∞:{ad['item_name']}\n–¶—ñ–Ω–∞:{ad['item_price']}\n–†–æ–∑–º—ñ—Ä:{ad['item_size']}\n\n{ad['item_link']}")
                os.remove(ad['item_path'])
        

        await asyncio.sleep(random.randrange(2,7))
    

    except json.JSONDecodeError:
        with open (f'searches/{search_item}.json', 'w') as f3:
            json.dump(ads_list, f3, indent=4, ensure_ascii=False)


async def main(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        sql.execute(f'SELECT * FROM searches')
        searches = sql.fetchall()
        if len(searches) == 0:
            await asyncio.sleep(60)
        else:
            
            for i in searches:
                global item_search
                item_search = i[1]
                if i[2] == '–ß–æ–ª–æ–≤—ñ—á–∏–π':
                    await get_data(f"https://shafa.ua/men?search_text={item_search.replace(' ','%20')}&conditions=2&conditions=3&conditions=4&conditions=5&sort=4")
                elif i[2] == '–ñ—ñ–Ω–æ—á–∏–π':
                    await get_data(f"https://shafa.ua/women?search_text={item_search.replace(' ','%20')}&conditions=2&conditions=3&conditions=4&conditions=5&sort=4")
                else:
                    await get_data(f"https://shafa.ua/men?search_text={item_search.replace(' ','%20')}&conditions=2&conditions=3&conditions=4&conditions=5&sort=4")
                    await get_data(f"https://shafa.ua/women?search_text={item_search.replace(' ','%20')}&conditions=2&conditions=3&conditions=4&conditions=5&sort=4")



async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(main(10))
    executor.start_polling(dp, skip_updates=True, on_shutdown=shutdown)